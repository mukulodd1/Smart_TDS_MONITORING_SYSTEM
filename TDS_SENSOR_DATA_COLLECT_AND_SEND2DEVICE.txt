

#include <ESP8266WiFi.h>

const char* ssid = "WiFi_Name";
const char* password = "WiFi_Password";
const char* host = "Host_Address";


#define TdsSensorPin A0
#define VREF 5.0      // analog reference voltage(Volt) of the ADC
#define SCOUNT  30           // sum of sample point
int analogBuffer[SCOUNT];    // store the analog value in the array, read from ADC
int analogBufferTemp[SCOUNT];
int analogBufferIndex = 0,copyIndex = 0;
float averageVoltage = 0,tdsValue = 0,temperature = 25;

void setup()
{
    Serial.begin(115200);
    pinMode(TdsSensorPin,INPUT);
	
	
  //Serial.begin(115200);
  delay(10);
  Serial.println();
  Serial.println();
  Serial.println();

  Serial.println("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid,password);

  while(WiFi.status()!= WL_CONNECTED)
  {
    delay(500);
    Serial.println(".");
   }
  Serial.println("WiFi connected");
  Serial.print("IP Address =");
  Serial.println(WiFi.localIP());
}

void loop()
{
   static unsigned long analogSampleTimepoint = millis();
   if(millis()-analogSampleTimepoint > 40U)     //every 40 milliseconds,read the analog value from the ADC
   {
     analogSampleTimepoint = millis();
     analogBuffer[analogBufferIndex] = analogRead(TdsSensorPin);    //read the analog value and store into the buffer
     analogBufferIndex++;
     if(analogBufferIndex == SCOUNT) 
         analogBufferIndex = 0;
   }   
   static unsigned long printTimepoint = millis();
   if(millis()-printTimepoint > 800U)
   {
      printTimepoint = millis();
      for(copyIndex=0;copyIndex<SCOUNT;copyIndex++)
        analogBufferTemp[copyIndex]= analogBuffer[copyIndex];
      averageVoltage = getMedianNum(analogBufferTemp,SCOUNT) * (float)VREF / 1024.0; // read the analog value more stable by the median filtering algorithm, and convert to voltage value
      float compensationCoefficient=1.0+0.02*(temperature-25.0);    //temperature compensation formula: fFinalResult(25^C) = fFinalResult(current)/(1.0+0.02*(fTP-25.0));
      float compensationVolatge=averageVoltage/compensationCoefficient;  //temperature compensation
      tdsValue=(133.42*compensationVolatge*compensationVolatge*compensationVolatge - 255.86*compensationVolatge*compensationVolatge + 857.39*compensationVolatge)*0.5; //convert voltage value to tds value
      //Serial.print("voltage:");
      //Serial.print(averageVoltage,2);
      //Serial.print("V   ");
        Serial.print("TDS Value:");
        Serial.print(tdsValue,0);
        Serial.println("ppm");
	  
	  
	  
	   Serial.print("Connecting to");
       Serial.println(host);
       WiFiClient client;
      const int  httpPort =80;
  if(!client.connect(host,httpPort))
  {
    Serial.println("Connection Failed");
    return ;
  }
   String url="/receiver.php?TDS=tdsValue";
   
   Serial.print("requesting URL: ");
   Serial.println(url);
   client.print(String("GET ")+url+ "HTTP/1.1\r\n"+
   "Host: " + host +"\r\n"+
   "Connection  : close\r\n\r\n");
   unsigned long timeout = millis();
   while(client.available()==0)
   {
    if(millis()-timeout>5000)
    {
      Serial.println(">>>Client Timeout");
      client.stop();
      return ;
    }
   }
   while(client.available())
   {
     String line = client.readStringUntil('\r');
     Serial.println(line);
   }
   }
}
int getMedianNum(int bArray[], int iFilterLen) 
{
      int bTab[iFilterLen];
      for (byte i = 0; i<iFilterLen; i++)
	  bTab[i] = bArray[i];
      int i, j, bTemp;
      for (j = 0; j < iFilterLen - 1; j++) 
      {
	  for (i = 0; i < iFilterLen - j - 1; i++) 
          {
	    if (bTab[i] > bTab[i + 1]) 
            {
		bTemp = bTab[i];
	        bTab[i] = bTab[i + 1];
		bTab[i + 1] = bTemp;
	     }
	  }
      }
      if ((iFilterLen & 1) > 0)
	bTemp = bTab[(iFilterLen - 1) / 2];
      else
	bTemp = (bTab[iFilterLen / 2] + bTab[iFilterLen / 2 - 1]) / 2;
      return bTemp;
}
